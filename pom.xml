<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.springframework</groupId>
    <artifactId>gs-producting-web-service</artifactId>
    <version>0.1.0</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.5.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Apparently we want the spring-ws-core (which must be the bit below) & wsdl stuff would make sense -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web-services</artifactId>
        </dependency>
        <dependency>
            <groupId>wsdl4j</groupId>
            <artifactId>wsdl4j</artifactId>
        </dependency>


    </dependencies>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- This bit apparently will generate the jav from the XSD -->
            <plugin>
	            <groupId>org.codehaus.mojo</groupId>
	            <artifactId>jaxb2-maven-plugin</artifactId>
	            <version>1.6</version>
	            <executions>
		            <execution>
		            	<id>xjc</id>
			            <goals>
			            	<goal>xjc</goal>
		            	</goals>
		            </execution>
	            </executions>
	            <configuration>
                    <!-- Tell it where to find the XSD and where too generate to? -->
	            	<schemaDirectory>${project.basedir}/src/main/resources/</schemaDirectory>
	            	<outputDirectory>${project.basedir}/src/main/java</outputDirectory>
                    <!-- Still not sure how it comes up with "package name" but can clearly redirect where it write
                                        <outputDirectory>${project.basedir}/target/main/java</outputDirectory>
                    -->
                    <clearOutputDir>false</clearOutputDir>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>